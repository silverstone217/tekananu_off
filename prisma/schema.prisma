// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  phone         String?
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  products Product[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Test {
  id        String   @id @default(cuid())
  count     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Product {
  id          String   @id @default(cuid()) // Identifiant unique
  title       String // Nom du produit
  description String? // Description facultative
  image       String? // URL de l’image du produit
  images      String[] // Tableau d'URLs des images du produit
  available   Boolean  @default(true) // Disponibilité
  state       String // État du produit (par exemple, "neuf", "d'occasion")

  price    Float // Prix du produit
  currency String @default("USD") // Devise, par défaut USD

  type     String // Type de produit (par exemple, "t-shirt", "hoodie")
  category String // Catégorie du produit (par exemple, "vêtements", "accessoires")
  brand    String? // Marque du produit (par exemple, "Nike", "Adidas")
  color    String? // Couleur du produit (par exemple, "rouge", "bleu")

  createdAt DateTime @default(now()) // Date de création
  updatedAt DateTime @updatedAt // Date de mise à jour automatique

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
